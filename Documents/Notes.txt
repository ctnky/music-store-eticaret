https://trello.com/b/OaHWHNee/musicstore
Blank solution oluşturuldu
BLL, Core, DAL, Model projeleri class library olarak eklendi.
UI.MVC projesi Empty,MVC olarak eklendi

1		CORE
1.1		Entity klasörü oluşturuldu
1.1.1	BaseEntity class'ı oluşturuldu
		BaseEntity class'ı interface değil abstract yapıldı çünkü ctor yapılamıyor interface'te.

		    public abstract class BaseEntity
				{
					public BaseEntity()
					{
						IsDeleted = false;
						CreatedDate = DateTime.Now;
					}

					public int ID { get; set; }
					public bool IsDeleted { get; set; }
					public DateTime CreatedDate { get; set; }
				}

1.2		DAL klasörü oluşturuldu
1.2.1	IRepository interface'i oluşturuldu
		IRepository içerisindeki Expressionlar, LINQ kullanılması için yapılmış.
		where kısmını neden yazdım? sadece BaseEntity'den kalıtım alanlara etki etmesi için.

				   public interface IRepository<TEntity>
				where TEntity : BaseEntity
			{
				void Add(TEntity entitiy);
				void Update(TEntity entity);
				void Remove(TEntity entity);

				TEntity Get(Expression<Func<TEntity, bool>> filter = null);
				ICollection<TEntity> GetAll(Expression<Func<TEntity, bool>> filter = null);
			}

1.2.2	EntityFramework klasörü oluşturuldu
1.2.2.1 EFRepositoryBase isminde public class oluşturuldu

	  public class EFRepositoryBase<TEntity, TContext> : IRepository<TEntity>
        where TEntity:BaseEntity, new()
        where TContext:DbContext, new()
    {
        public void Add(TEntity entitiy)
        {
          
        }

        public TEntity Get(Expression<Func<TEntity, bool>> filter = null)
        {
           
        }

        public ICollection<TEntity> GetAll(Expression<Func<TEntity, bool>> filter = null)
        {
           
        }

        public void Remove(TEntity entity)
        {
           
        }

        public void Update(TEntity entity)
        {
        
        }
    }

1.3 Entity Framework Core projesine eklendi. (NuGet)
1.2.2.2 EFSingletonContext isimli public class oluşturuldu.
sebebi: bir kere alınsın nesne, her class ayaga kalkarken tekrar tekrar nesne oluşturulmasın, mevcut nesne üzerinden işlem yapılmaya devam etsin.

				 public class EFSingletonContext<TContext>
				where TContext : DbContext, new()
			{
				private static TContext _instance;
				public static TContext Instance
				{
					get
					{
						if (_instance == null)
						{
							_instance = new TContext();
						}
						return _instance;
					}
				}
			}

1.2.2.2 EFRepositoryBase'e devam
usinglerde Linkq ve Linq.Expressions olduguna emin ol.
 public class EFRepositoryBase<TEntity, TContext> : IRepository<TEntity>
        where TEntity : BaseEntity, new()
        where TContext : DbContext, new()
    {
        TContext ctx = EFSingletonContext<TContext>.Instance;

        public void Add(TEntity entity)
        {
            ctx.Entry(entity).State = EntityState.Added;
            ctx.SaveChanges();
        }

        public TEntity Get(Expression<Func<TEntity, bool>> filter = null)
        {
            return ctx.Set<TEntity>().Where(filter).SingleOrDefault();
        }

        public ICollection<TEntity> GetAll(Expression<Func<TEntity, bool>> filter = null)
        {
            if (filter==null)
            {
                return ctx.Set<TEntity>().ToList();
            }
            else
            {
                return ctx.Set<TEntity>().Where(filter).ToList();
            }
        }

        public void Remove(TEntity entity)
        {
            ctx.Entry(entity).State = EntityState.Deleted;
        }

        public void Update(TEntity entity)
        {
            ctx.Entry(entity).State = EntityState.Modified;
            ctx.SaveChanges();
        }
    }

2 MODEL
2.1 referanslara Core ekledik.
2.2 Album isimli public class oluşturduk.

  public class Album:BaseEntity
    {
        public Album()
        {
            Discounted = false;

        }

        public string Title { get; set; }
        public string AlbumUrl { get; set; }
        public decimal Price { get; set; }
        public short Stock { get; set; }
        public bool Discounted { get; set; }

        //Mapping işlemi yapılacak
    }

2.3 Artist isimli public class oluşturuldu

    public class Artist : BaseEntity
    {
        public string FullName { get; set; }
        public byte Rating { get; set; }

        // Mapping

        public virtual ICollection<Album> Albums { get; set; }
    }

2.4 Genre isimli public class oluşturuldu

	 public class Genre:BaseEntity
    {
        public string Name { get; set; }
        public string Description { get; set; }

        // Mapping

        public virtual ICollection<Album> Albums { get; set; }
    }

2.5 Order isimli public class oluşturuldu

    public class Order : BaseEntity
    {
        public int UserID { get; set; }
        public DateTime OrderDate { get; set; }
        public DateTime ShippedDate { get; set; }
        public int ShipperID { get; set; }
        public string ShipAdress { get; set; }
        public string Phone { get; set; }
        public string  Mail { get; set; }

        // Mapping
    }


2.6 OrderDetail public class'ı oluşturuldu.

    public class OrderDetail
    {
        public int OrderID { get; set; }
        public int AlbumID { get; set; }
        public short Quantity { get; set; }
        public double Discount { get; set; }
        public bool IsCanceled { get; set; } // sipariş iptal olsa da içerdiği bilgi önemli oldugundan duracak.
        public string Notes { get; set; }

        // Mapping

        public virtual Order Order { get; set; }
        public virtual Album Album { get; set; }

    }

2.7 Shipper public class'ı oluşturuldu.

 public class Shipper : BaseEntity
    {
        public string CompanyName { get; set; }
        public string Phone { get; set; }

        // Mapping
        public virtual ICollection<Order> Orders { get; set; }
    }

2.8 User public class'ı oluşturuldu.

    public class User : BaseEntity
    {
        public User()
        {
            IsApproved = false;
        }

        public string UserName { get; set; }
        public string Password { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Phone { get; set; }
        public string Mail { get; set; }
        public string Adress { get; set; }
        public string Notes { get; set; }
        public DateTime BirthDate { get; set; }
        public bool IsApproved { get; set; }

        //Mapping

        public virtual ICollection<Order> Orders { get; set; }
    }

2.9 diğer classlara eklemeler: mappingler

Album:

        public int GenreID { get; set; }
        public int ArtistID { get; set; }

        //Mapping

        public virtual Genre Genre { get; set; }
        public virtual Artist Artist { get; set; }
        public virtual ICollection<OrderDetail> OrderDetails { get; set; }

Order:

   public virtual ICollection<OrderDetail> OrderDetails { get; set; }
        public virtual User User { get; set; }
        public virtual Shipper Shipper { get; set; }

tüm tablolar hazır.

3 DAL
3.1		core ve model referans olarak eklendi
3.2		Abstract diye klasör yaptık.
3.2.1	bi IAlbumDAL public interface eklendi. IRepository'den kalıtım alıyor.
3.2.2	aynısı IArtistDAL, IGenreDAL, IOrderDAL, IShipperDAL, IUserDAL da yapılıyor.
3.3.1	Concrete klasörü yaptık, içerisine AlbumRepository yaptık. EFRepository'den kalıtım alıyor.			  henüz dbcontext bağlamıyoruz.
3.3.2	EntityFramework'ü DAL'a ekliyoruz. + MusicStoreDbContext oluşturuyoruz, DbContext'ten kalıtım alıyor.
3.3.3	AlbumRepository içerisindeki DbContext bölümüne MusicStoreDbContext yazıyoruz.
3.3.4	aynı işlemleri Artist,Genre,Order,Shipper,User için de yapıyoruz.
3.3.5	MusicStoreDbContext'in içi dolduruluyor.

    public class MusicStoreDbContext : DbContext
    {
        public MusicStoreDbContext()
            : base("Server = CTNKYWORKS ; Database = MusicStoreDb; Trusted_Connection=true")
        {
            ////
        }

        public DbSet<Album> Albums { get; set; }
        public DbSet<Artist> Artists { get; set; }
        public DbSet<Genre> Genres { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderDetail> OrderDetails { get; set; }
        public DbSet<User> Users { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }
    }

3.3.6 MyStrategy diye bi class oluşturuyoruz.
	  drive'daki içerik txt dosyasını indiriyoruz. içerigini yapıştırıyoruz.
3.3.7 MusicStoreDbContext içine SetInitializer ayarlıyoruz.
3.3.8 OrderDetailMapping diye bi class oluşturuyoruz.

  class OrderDetailMapping : EntityTypeConfiguration<OrderDetail>
    {
        public OrderDetailMapping()
        {
            HasKey(a => new { a.OrderID, a.AlbumID });
        }
    }

3.3.9 musicstoredbcontexe mapping eklemesi.
      protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new OrderDetailMapping());
        }

3.4.0 mystrategy'ye eklemeler.

		context.Genres.AddRange(genres);
		context.Artists.AddRange(artists);
		context.SaveChanges();

4 BLL

4.1 Abstract ve Concrete klasörleri oluşturuluyor.
4.1.1 BLL'e Core, DAL ve Model reference verilir.
4.1.2 Abstract klasöründe IBaseService interface'i oluşturulur.

    public interface IBaseService<T>
        where T : BaseEntity
    {
        void Insert(T entity);
        void Delete(T entity);
        void DeleteById(int entityID);
        void Update(T entity);
        T Get(int entityID);
        ICollection<T> GetAll();
    }

4.1.3 IAlbumService public interface oluşturulur, IBaseService'ten kalıtım alır.
4.1.4 aynısı Artist, Genre, Order, Shipper ve User için de yapılır.
4.1.5 BLL'e Ninject indirilecek. (NuGet) ve 3.2.0 sürümü olmalı.
4.1.6 Ninject klasörü oluşturuldu. (Container isimli klasör oluşturulup içerisine Ninject olabilirdi)
4.1.7 içerisine CustomDALModule class'ı oluşturuldu. NinjectModule'den kalıtım aldı.
 
 public class CustomDALModule : NinjectModule
    {
        public override void Load()
        {
            Bind<IAlbumDAL>().To<AlbumRepository>();
            Bind<IArtistDAL>().To<ArtistRepository>();
            Bind<IGenreDAL>().To<GenreRepository>();
            Bind<IOrderDAL>().To<OrderRepository>();
            Bind<IShipperDAL>().To<ShipperRepository>();
            Bind<IUserDAL>().To<UserRepository>();
        }
    }

4.2.8 Concrete klasörünün içerisine AlbumService,ArtistService...UserService oluşturulup IAlbumService vs'den kalıtım alıyor.

ilgili IDAL'dan yansıma alıp ctor'da tamamlanır, interface implementlerin içinde de tamamlanır.

public class AlbumService : IAlbumService
    {
        IAlbumDAL _albumDAL;

        public AlbumService(IAlbumDAL album)
        {
            _albumDAL = album;
        }

        public void Delete(Album entity)
        {
            _albumDAL.Remove(entity);
        }

        public void DeleteById(int entityID)
        {
            Album album = _albumDAL.Get(a => a.ID == entityID);
            Delete(album);
        }

        public Album Get(int entityID)
        {
            return _albumDAL.Get(a => a.ID == entityID);
        }

        public ICollection<Album> GetAll()
        {
            return _albumDAL.GetAll();
        }

        public void Insert(Album entity)
        {
            _albumDAL.Add(entity);
        }

        public void Update(Album entity)
        {
            _albumDAL.Update(entity);
        }
    }

4.2.9	Artist, Genre, Order, Shipper ve User için de aynısı yapılıyor.

5	UI.MVC
5.1 Model, Core ve BLL'in referansı verilir
5.2 Ninject.MVC4 ekleniyor. versiyonu 3.2.0 olacak. App_Start klasörünü NinjectWebCommon class'ı geldi.
5.3 NinjectWebCommon'da RegisterServices'e eklemeler yapılıyor.

5.4 HomeController ekleniyor. (hata alınırsa solution rebuild)
5.4.1 Add View

5.5 AccountController ekleniyor, eklemeler yapılıyor.
add view derken details seçilir, user seçilir, scripts tiklenir.

5.6 ve WebConfig'e gelip add namespace=musicstore.model yazabiliriz.sonra da using kısmında sadece user olarak güncellenebilir. sonra tüm içerigi siliyoruz zira hocanın hoşuna gitmemiş. tekrar yazıyoruz. details seçmemiş gibi oldu.

<div class="col-lg-12">
    <div class="col-lg-5">
        <div class="panel panel-danger">
            <div class="panel-heading">
                <h3>Kullanıcı Kayıt Ekranı</h3>
            </div>
            <div class="panel-body">
                @using (Html.BeginForm("Register", "Account", FormMethod.Post))
                {
                    <fildset>
                        <p>
                            <label>Username:</label>
                            @Html.TextBoxFor(a => a.UserName, new { @class = "form-control" })
                        </p>
                        <p>
                            <label>Password:</label>
                            @Html.TextBoxFor(a => a.Password, new { @class = "form-control" })
                        </p>
                        <p>
                            <label>Name:</label>
                            @Html.TextBoxFor(a => a.FirstName, new { @class = "form-control" })
                        </p>
                        <p>
                            <label>Surname:</label>
                            @Html.TextBoxFor(a => a.LastName, new { @class = "form-control" })
                        </p>
                        <p>
                            <label>Phone:</label>
                            @Html.TextBoxFor(a => a.Phone, new { @class = "form-control" })
                        </p>
                        <p>
                            <label>Mail:</label>
                            @Html.TextBoxFor(a => a.Mail, new { @class = "form-control", type = "email" })
                        </p>
                        <p>
                            <label>Adress:</label>
                            @Html.TextBoxFor(a => a.Adress, new { @class = "form-control" })
                        </p>
                        <p>
                            <label>Notes:</label>
                            @Html.TextAreaFor(a => a.Notes, new { @class = "form-control" })
                        </p>
                        <p>
                            <label>Birthdate:</label>
                            @Html.TextBoxFor(a => a.BirthDate, new { @class = "form-control", type = "date" })
                        </p>
                        <p>
                            <input type="submit" name="name" value="SAVE" class="btn btn-success" />
                        </p>
                    </fildset>
                }
            </div>
        </div>
    </div>
</div>

5.7	hata verdi, bll'de entity framework unutmuşuz. (çözmedi)
hata duruyor.

5.8	AccountController'a register httppost eklendi.
 [HttpPost]
        public ActionResult Register(User user)
        {
            try
            {
                _userService.Insert(user);

            }
            catch (Exception ex)
            {
                ViewBag.Error = "Successfully signed up.";
                return View();
            }
            return RedirectToAction("Login", "Account");
        }

5.9		Tools diye bi klasör oluşturuldu, MailHelper diye de class eklendi.

    public static bool SendConfirmationMail(string username, string password, string mail, int id)
        {
            bool result = false;
            MailMessage msg = new MailMessage();
            msg.To.Add(mail);
            msg.Subject = "Welcome";
            msg.IsBodyHtml = true;
            msg.Body = "Thank you for signing in";
            msg.From = new MailAddress("bilgeinsan1530@gmail.com");
            SmtpClient smtpClient = new SmtpClient("smtp.gmail.com", 587);
            smtpClient.EnableSsl = true;
            NetworkCredential credential = new NetworkCredential("bilgeinsan1530@gmail.com", "Bilge1530insan.");
            smtpClient.Credentials = credential;
            try
            {
                smtpClient.Send(msg);
                result = true;
            }
            catch (Exception)
            {
                result = false;

            }
            return result;
        }

5.9.1	Daha az güvenli erişim'i açmak lazım google ayarlardan.
5.9.2 Register actionresult'a eklemeler.

UI'da EF yokmuş, ekliyoruz.
register sayfasını çalıştırıyoruz, tüm txtbox'ları doldurup submit diyoruz, db oluşuyor.

5.9.3 AccountController'a Login() eklendi, view eklendi.

view içi:

@model User

<div class="row">
    <div class="col-lg-12">
        <div class="col-lg-5">
            <div class="panel panel-danger">
                <div class="panel-heading">
                    <h3>Kullanıcı Kayıt Ekranı</h3>
                </div>
                <div class="panel-body">
                    @using (Html.BeginForm("Register", "Account", FormMethod.Post))
                    {
                        <fildset>
                            <p>
                                <label>Username:</label>
                                @Html.TextBoxFor(a => a.UserName, new { @class = "form-control" })
                            </p>
                            <p>
                                <label>Password:</label>
                                @Html.TextBoxFor(a => a.Password, new { @class = "form-control" })
                            </p>
                            <p>
                                <input type="submit" name="name" value="LOGIN" class="btn btn-success" />
                            </p>
                        </fildset>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

5.9.4 HttpPost eklendi Login'e.

 [HttpPost]
        public ActionResult Login(User user)
        {
            return View();
        }

5.9.5 BLL'de Abstract'tan IUserService açtık.

    User GetUserByLogin(string username, string password);

5.9.6 Concrete > UserService'e tekrar impelemnt edilir.

   return _userDAL.Get(a => a.UserName == username && a.Password == password);

5.9.7 AccountController > Login devam.

	    [HttpPost]
        public ActionResult Login(User user)
        {
            var gelenKullanici = _userService.GetUserByLogin(user.UserName, user.Password);
            if (gelenKullanici != null)
            {
                Session["kullanici"] = gelenKullanici;
                return RedirectToAction("Index", "Home");
            }
            ViewBag.Error = "Kullanıcı bulunamadı";
            return View();
        }

5.9.8 Projenin klasörüne gelinip, Content> Images klasörüne gelip placeholder.gif yapıştırılır.

5.9.9 HomeController'a eklemeler.

    IAlbumService _albumService;
        IGenreService _genreService;

        public HomeController(IAlbumService album, IGenreService genre)
        {
            _albumService = album;
            _genreService = genre;
        }

5.6 View>Home> _GenreMenu isminde partial view ekleniyor.

@model List<Genre>

@foreach (Genre item in Model)
{
    <li id="menu_@item.ID"><a href='javascript:void{0}' onclick="GenreByAlbumList(@item.ID)">@item.Name</a></li>
}

5.7 Viev>Home> _GenreOfAlbums isimli partial veiw ekleniyor.

@foreach (Album item in Model)
{
<div class="col-lg-4">
    <div class="panel panel-default">
        <div class="panel panel-heading">
            <span title="@item.Title">@item.Title.Substring(0,5)</span>
        </div>
        <div class="panel panel-body">
            <div style="width:100%;height:75%;">
                <img src="@item.AlbumArtUrl" style="width:100%;height:100%" alt="@item.Title" />
            </div>
            <div style="height:25%;">
                <div class="col-lg-1">
                    @item.Price
                </div>
                <div class="col-lg-5">

                </div>
                <div class="col-lg-3">
                    <input type="button" name="name" class="btn btn-warning" onclick="AddToMyCart(@item.ID)" value="Add Cart"/>
                </div>
            </div>
        </div>
    </div>
</div>
}

5.8 Views>Home> _LastFiveAlbums partial view eklendi.
5.9 DiscountedAlbums eklendi

5.10 BLL>Abstract>IAlbumService içerisine eklemeler.
	
	 List<Album> GetAlbumOfGenre(int genreID);
        List<Album> GetDiscountedAlbums();
        List<Album> GetLastFiveAlbums();

5.11	sonra tekrardan Concrete Album service içerisine impelent ediliyor, içleri dolduruluyor.

	using System.Linq; eklendi.

	     public List<Album> GetDiscountedAlbums()
        {
            return _albumDAL.GetAll(a => a.Discounted).ToList();
        }

        public List<Album> GetLastFiveAlbums()
        {
            return _albumDAL.GetAll().OrderByDescending(a => a.CreatedDate).Take(5).ToList();
        }

        public List<Album> GetAlbumOfGenre(int genreID)
        {
            return _albumDAL.GetAll(a => a.GenreID == genreID).ToList();
        }

5.11	HomeController'a eklemeler.

        public ActionResult Index()
        {
            var albums = _albumService.GetAll();
            return View();
        }

        public ActionResult _GenreOfAlbums(int? id)
        {
            if (id != null)
            {
                return PartialView(_albumService.GetAlbumOfGenre(id.Value).ToList());
            }

            return PartialView(_albumService.GetAll());
        }

        public ActionResult _GenreMenu()
        {

            return PartialView(_genreService.GetAll());
        }

        public ActionResult _DiscountedAlbums()
        {
            var indirimdekiler = _albumService.GetDiscountedAlbums().ToList();

            if (indirimdekiler.Count == 0)
            {
                ViewBag.Error = "İndirimde ürünümüz bulunmamaktadır";
                return PartialView();
            }

            return PartialView(indirimdekiler);
        }

        public ActionResult _LastFiveAlbums()
        {
            return PartialView(_albumService.GetLastFiveAlbums());
        }

5.12	Home>DiscountedAlbums'te 0,2 olacak.
5.13 bazı değişiklikler yapıldı.
tüm partialview'lerde 0,5 olan yer 0,2 olacak.
ayrıca _discountedalbumse if eklenip else'ine foreach taşınacak.

5.14 index'e eklemeler

@section scripts{
<script>
    funtion AddToMyCart(aid) {
        $.ajax({
            type: "Get",
            url: '@Url.Action("AddToCart","Cart")',
            data: { id: aid },
            success: function (data) {

            }
        })
    }
    </script>
}

5.15 _Layout'a eklemeler

 <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Store","Index","Home")</li>
                    @*<li>@Html.Action()</li>*@
                </ul>

5.16 CartController eklendi.

5.17 Cart klasörüne _CartButton partialview eklendi.

5.18 Global.asax'ın  içindeki kodlar silindi, sonra dosya silindi. ardından tekrar eklendi.

5.19 Model klasörüne CartItemViewModel diye class oluşturuldu.

 public class CartItemViewModel
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public short Amount { get; set; }
        public decimal SubTotal {
            get
            {
                return Price * Amount;
            }
        }
    }

5.20 MyCart diye bi class oluşturduk

    public class MyCart
    {
        private Dictionary<int, CartItemViewModel> _sepet = new Dictionary<int, CartItemViewModel>();

        public List<CartItemViewModel> GetAllCartItems {
            get
                {
                return _sepet.Values.ToList();
                }
        }
    }

5.21 Add, Update, Delete, TotalAmount metotları eklendi.

        public void Add(CartItemViewModel cartItem)
        {
            if (_sepet.ContainsKey(cartItem.ID))
            {
                _sepet[cartItem.ID].Amount += cartItem.Amount;
                return;
            }

            _sepet.Add(cartItem.ID, cartItem);
        }

        public void Update(int id, short amount)
        {
            if (_sepet.ContainsKey(id))
            {
                _sepet[id].Amount = amount;
            }
        }

        public void Delete(int id)
        {
            if (_sepet.ContainsKey(id))
            {
                _sepet.Remove(id);
            }
        }

        public int TotalAmount{ get
            {
                return _sepet.Values.Sum(a => a.Amount);
            }
        }

5.22 Global.asax'a eklemeler.
     AreaRegistration.RegisterAllAreas();
            RouteConfig.RegisterRoutes(RouteTable.Routes);

			 Session["cart"] = new MyCart();

5.23 Cart>_CartButton içine eklemeler.

@using MusicStore.UI.MVC.Models

@Html.ActionLink("Cart(" + (Session["cart"] as MyCart).TotalAmount + ")", "Index", "Cart");

5.24 Shared>_Layout içerisine yorumda bıraktığımız <li> içerisine eklemeler.	  

  <li>@Html.Action("_CartButton","Cart")</li>

5.25 index'e geri dönüp eklemeler.

function (data) {
$("menu li:nth-child(2)").html(data);
}

5.26 index'e eklemelere devam.

  function GenreByAlbumList(id) {
            $("#genreMenu li").removeClass("active");
            $("#menu_" + id).addClass("activve");

            $.ajax({
                type: "Get",
                url: '@Url.Action("_GenreofAlbums","Home")',
                data: { id: id },
                success: function (data) {
                    $("#albumList").html(data);
                }
            })

5.27 _layout'a <script>'lerden sonra bi satır eklendi.
   @RenderSection("scripts", false);

5.28 cartcontroller'a eklemeler.
>> MyCart içerisindeki Add methodu ismi AddCart oldu.

    public class CartController : Controller
    {
        IAlbumService _albumService;

        public CartController(IAlbumService album)
        {
            _albumService = album;
        }
        // GET: Cart
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult _CartButton()
        {
            return PartialView();
        }

        public ActionResult AddToCart(int id)
        {
            MyCart cart = Session["cart"] as MyCart;
            CartItemViewModel cartItem = new CartItemViewModel();
            var eklenenAlbum = _albumService.Get(id);
            cartItem.ID = eklenenAlbum.ID;
            cartItem.Name = eklenenAlbum.Title;
            cartItem.Price = eklenenAlbum.Discounted ? eklenenAlbum.Price * 0.9m : eklenenAlbum.Price;
            cartItem.Amount = 1;
            cart.AddCart(cartItem);
            Session["cart"] = cart;
            return PartialView("_CartButton");
        }
    }

proje çalışmıyordu, layout'da li'ye menu id'si ekledik, düzeldi.

5.29 CartController'a eklemeler.

 public ActionResult _CartList()
        {

            return PartialView();
        }

        public ActionResult UpdateCart(short amount, int id)
        {
            MyCart guncellenenSepet = Session["cart"] as MyCart;
            guncellenenSepet.Update(id, amount);
            Session["cart"] = guncellenenSepet;
            return RedirectToAction("_CartList", "Cart");
        }

5.30 Cart>_CartList diye bi partialpage oluşturuldu.

@using MusicStore.UI.MVC.Models

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th>Amount</th>
            <th>SubTotal</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (CartItemViewModel item in (Session["cart"] as MyCart).GetAllCartItems)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Price</td>
                <td><input type="number" id="txtAmount" value="@item.Amount" min="0" onchange="CartUpdate(this.value, @item.ID)"</td>
                <td>@item.SubTotal</td>
                <td><a href="Javascript:void(0)" onclick="DeleteItemCart(@item.ID)">DELETE</a></td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="4">TOTAL</td>
            <td>@((Session["cart"] as MyCart).TotalAmount.ToString("C2")</td>
        </tr>
        <tr>
            <td colspan="5">
                @Html.ActionLink("Sepeti Onayla", "", "");
            </td>
        </tr>
    </tfoot>
</table>

5.31 CartController'a eklemeler.

     public ActionResult DeleteItemFromCart(int id)
        {
            MyCart silinecekCart = Session["cart"] as MyCart;
            silinecekCart.Delete(id);
            Session["cart"] = silinecekCart;

            return RedirectToAction("_CartList", "Cart");
        }

5.32 CartController Index View eklendi.


@{
    ViewBag.Title = "Index";
}

<div class="row">
    <div id="dvSepet" class="col-lg-8">
        @Html.Action("_CartList", "Cart")
    </div>
</div>

@section scripts
{
    <script>
        function CartUpdate(deger, gid) {
            $.ajax({
                type: "Get",
                url: '@Url.Action("UpdateCart","Cart")',
                data: { amount: deger, id: gid },
                success: function (data) {
                    $("#dvSepet").html(data);
                }
            })
        }

        function DeleteItemFromCart(gid) {
            var cvp = confirm("Are you sure?")
            if (cvp) {
                $.ajax({
                    type: "Get",
                    url:'@Url.Action("DeleteItemFromCart", "Cart")',
                    data: { id: gid },
                    success: function (data) {
                        $("#dvSepet").html(data);
                    }
                })
            }
        }
    </script>
}




